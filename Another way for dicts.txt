class LinkedListNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class Graph:
    def __init__(self):
        self.vertices = {}  # Use a dictionary to represent vertices and their edges

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = None  # Initialize with an empty linked list

    def add_edge(self, from_vertex, to_vertex):
        if from_vertex in self.vertices and to_vertex in self.vertices:
            if self.vertices[from_vertex] is None:
                self.vertices[from_vertex] = LinkedListNode(to_vertex)
            else:
                new_node = LinkedListNode(to_vertex)
                current = self.vertices[from_vertex]
                while current.next is not None:
                    current = current.next
                current.next = new_node

    def get_edges(self, vertex):
        if vertex in self.vertices:
            edges = []
            current = self.vertices[vertex]
            while current is not None:
                edges.append(current.data)
                current = current.next
            return edges

# Create the graph
g = Graph()
g.add_vertex("Rafik")
g.add_vertex("Leen")
g.add_edge("Rafik", "Leen")

# Get edges of a vertex
edges = g.get_edges("Rafik")
print(edges)  # Output: ['Leen']
